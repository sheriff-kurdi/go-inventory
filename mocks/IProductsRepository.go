// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	repositories "github.com/sheriff-kurdi/inventory/core/contracts/repositories"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	vm "github.com/sheriff-kurdi/inventory/core/vm"
)

// IProductsRepository is an autogenerated mock type for the IProductsRepository type
type IProductsRepository struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: connection, productId
func (_m *IProductsRepository) DeleteById(connection *gorm.DB, productId int) error {
	ret := _m.Called(connection, productId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(connection, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *IProductsRepository) GetById(id int) (vm.ProductVM, error) {
	ret := _m.Called(id)

	var r0 vm.ProductVM
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (vm.ProductVM, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) vm.ProductVM); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(vm.ProductVM)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdV2 provides a mock function with given fields: name, id
func (_m *IProductsRepository) GetByIdV2(name *string, id int) (vm.ProductVM, error) {
	ret := _m.Called(name, id)

	var r0 vm.ProductVM
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, int) (vm.ProductVM, error)); ok {
		return rf(name, id)
	}
	if rf, ok := ret.Get(0).(func(*string, int) vm.ProductVM); ok {
		r0 = rf(name, id)
	} else {
		r0 = ret.Get(0).(vm.ProductVM)
	}

	if rf, ok := ret.Get(1).(func(*string, int) error); ok {
		r1 = rf(name, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: connection, productVM
func (_m *IProductsRepository) Save(connection *gorm.DB, productVM vm.ProductSavingVM) (int, error) {
	ret := _m.Called(connection, productVM)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, vm.ProductSavingVM) (int, error)); ok {
		return rf(connection, productVM)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, vm.ProductSavingVM) int); ok {
		r0 = rf(connection, productVM)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, vm.ProductSavingVM) error); ok {
		r1 = rf(connection, productVM)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: connection
func (_m *IProductsRepository) SelectAll(connection *gorm.DB) []vm.ProductVM {
	ret := _m.Called(connection)

	var r0 []vm.ProductVM
	if rf, ok := ret.Get(0).(func(*gorm.DB) []vm.ProductVM); ok {
		r0 = rf(connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vm.ProductVM)
		}
	}

	return r0
}

// SelectAllByDetails provides a mock function with given fields: connection, languageCode
func (_m *IProductsRepository) SelectAllByDetails(connection *gorm.DB, languageCode string) []vm.ProductVM {
	ret := _m.Called(connection, languageCode)

	var r0 []vm.ProductVM
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) []vm.ProductVM); ok {
		r0 = rf(connection, languageCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vm.ProductVM)
		}
	}

	return r0
}

// SelectAllById provides a mock function with given fields: connection, id
func (_m *IProductsRepository) SelectAllById(connection *gorm.DB, id int) (vm.ProductVM, error) {
	ret := _m.Called(connection, id)

	var r0 vm.ProductVM
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) (vm.ProductVM, error)); ok {
		return rf(connection, id)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) vm.ProductVM); ok {
		r0 = rf(connection, id)
	} else {
		r0 = ret.Get(0).(vm.ProductVM)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, int) error); ok {
		r1 = rf(connection, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByCriteria provides a mock function with given fields: connection, searchCriteria
func (_m *IProductsRepository) SelectByCriteria(connection *gorm.DB, searchCriteria repositories.ProductsSearcheCriteria) []vm.ProductVM {
	ret := _m.Called(connection, searchCriteria)

	var r0 []vm.ProductVM
	if rf, ok := ret.Get(0).(func(*gorm.DB, repositories.ProductsSearcheCriteria) []vm.ProductVM); ok {
		r0 = rf(connection, searchCriteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vm.ProductVM)
		}
	}

	return r0
}

type mockConstructorTestingTNewIProductsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductsRepository creates a new instance of IProductsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductsRepository(t mockConstructorTestingTNewIProductsRepository) *IProductsRepository {
	mock := &IProductsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
